import logging
from aiogram import types, Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import filters
import subprocess
import os

#.py file with configs
from config import USER_ID, TOKEN

#bot configuration
bot = Bot('Your_token')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
user_id = your_id

save_reports = False

@dp.message_handler(filters.IDFilter(user_id), commands=['start'])
async def start(message: types.Message):
    await message.reply('Привет! Я твой личный помощник для проведения базового пентеста. Чтобы увидеть мои возможности, напиши /help')

@dp.message_handler(filters.IDFilter(user_id), commands=['help'])
async def help_command(message: types.Message):
    
    commands = [
        '/start - начать',
        '/help - список команд',
        '/settings - настройки'
    ]

    help_message = 'Список команд:\n'
    help_message += '\n'.join(commands)

    await message.reply(help_message)
    
@dp.message_handler(commands=['settings'])
async def settings(message: types.Message):
    global save_reports

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    enable_button = KeyboardButton('Включить сохранение отчетов')
    disable_button = KeyboardButton('Выключить сохранение отчетов')
    keyboard.add(enable_button, disable_button)

    await message.reply('Выберите действие:', reply_markup=keyboard)




@dp.message_handler(filters.IDFilter(user_id), content_types=['text'])
async def main(message: types.Message):
    command = message.text 
    try:
        if command.startswith('cd'):
            
            path2move = command.strip('cd ')
            
            if os.path.exists(path2move):
                os.chdir(path2move)
                await bot.send_message(message.chat.id, 'Directory changed to'+path2move)
            else:
                await bot.send_message(message.chat.id, 'Cant change directory to'+path2move)
        else:
            result = subprocess.run(command.split(' '), capture_output=True)
            await bot.send_message(message.chat.id, result.stdout.decode())
    except:
        await bot.send_message(message.chat.id, 'Invalid input')   

if __name__ == '__main__':
    logging.getLogger('aiogram').setLevel(logging.DEBUG)
    logging.basicConfig(level=logging.INFO, filename=f'bot.log', filemode='a', encoding='utf-8')
    
    executor.start_polling(dp, skip_updates=True)