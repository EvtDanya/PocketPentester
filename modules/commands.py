from aiogram.types import InlineKeyboardMarkup, Message, InlineKeyboardButton, CallbackQuery
from aiogram.dispatcher.filters import IDFilter
import subprocess
import os

from modules.config import dp, USER_ID, bot, save_reports
from modules.database import *
from modules.admin import *

@dp.message_handler(commands=['start'])
async def start(message: Message):
    if is_registered(message.from_user.id):
        await message.reply('Hi! I\'m your personal assistant for the basic pentest. To see my capabilities, write /help')
    else:
        await message.reply('You are not allowed to do this. Please contact the administrator to register')  
        
@dp.message_handler(commands=['help'])
async def help_command(message: Message):
    if is_registered(message.from_user.id):
        commands = [
            '/start - start work with bot',
            '/help - list of available commands',
            '/settings - bot settings',
            '/is_admin - check if user is admin'
        ]

        help_message = 'Available commands:\n'
        help_message += '\n'.join(commands)
        
        if is_admin(message.from_user.id):
            help_message += '\nAlso you can send me cmd linux commands and i will run them'
            
        if USER_ID == message.from_user.id:
            help_message += '\nYou can admin db by using commands /user_menu <telegram_id> and /register <telegram_id> <is_admin>'

        await message.reply(help_message)
    
@dp.message_handler(commands=['settings'])
async def settings(message: Message):
    if is_registered(message.from_user.id):
        global save_reports

        keyboard = InlineKeyboardMarkup(row_width=1)
        msg = 'Saving reports to file: ✅' if save_reports else 'Saving reports to file: ❌'
        report_button = InlineKeyboardButton(msg, callback_data='/save_reports')
        script_button = InlineKeyboardButton('Select useful file', callback_data='/select_script')
        keyboard.add(report_button, script_button)

        await message.reply('Choose what do you want to configure:', reply_markup=keyboard)

@dp.message_handler(commands=['is_admin'])
async def is_admin_check(message: Message):
    if is_registered(message.from_user.id):
        if is_admin(message.from_user.id):
            await message.reply('You are admin ✅')
        else:
            await message.reply('You are not admin ❌')

@dp.callback_query_handler(lambda c: c.data == '/save_reports')
async def handle_save_reports_callback(query: CallbackQuery):
    global save_reports
    save_reports = not save_reports

    if save_reports:
        await query.message.reply('✅ Saving reports to file is enabled.')
    else:
        await query.message.reply('❌ Saving reports to file is disabled.')

@dp.callback_query_handler(lambda c: c.data == '/select_script')
async def handle_select_script_callback(query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    script1_button = InlineKeyboardButton('Linpeas', callback_data='linpeas.sh')
    keyboard.add(script1_button)

    await query.message.reply('Select a script or file:', reply_markup=keyboard)


@dp.callback_query_handler()
async def handle_callback_query(query: CallbackQuery):
    script_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/scripts_n_files/' + query.data
   
    if script_path:
        with open(script_path, 'rb') as file:
            await bot.send_document(query.from_user.id, file)
    else:
        await bot.answer_callback_query(query.id, text='Invalid selection')

@dp.message_handler(content_types=['text'])
async def main(message: Message):
    if is_admin(message.from_user.id):
        command = message.text 
        try:
            if command.startswith('cd'):
                path2move = command.strip('cd ')
                
                if os.path.exists(path2move):
                    os.chdir(path2move)
                    await bot.send_message(message.chat.id, 'Directory changed to '+path2move)
                else:
                    await bot.send_message(message.chat.id, 'Cant change directory to '+path2move)
            else:
                result = subprocess.run(command.split(' '), capture_output=True)
                await bot.send_message(message.chat.id, result.stdout.decode())
        except:
            await bot.send_message(message.chat.id, 'Invalid input')   